{"version":3,"sources":["state.js","App.js","serviceWorker.js","Redirect.js","NotFound.js","index.js"],"names":["StateContext","createContext","useStateValue","useContext","BACKEND_APP_URL","FRONTEND_APP_URL","App","props","console","log","process","useState","slug","setSlug","redirect","setRedirect","expiration","setExpiration","newUrl","setNewUrl","copySuccess","setCopySuccess","textAreaRef","useRef","error","dispatch","setError","newError","type","newShorten","a","axios","post","data","response","className","Header","as","color","ref","value","readOnly","document","queryCommandSupported","Button","onClick","e","current","select","execCommand","target","focus","disabled","onSubmit","preventDefault","string","URL","_","isValidUrl","newRedirect","createRedirect","htmlFor","name","onChange","label","placeholder","text","map","key","Math","random","Boolean","window","location","hostname","match","Redirect","useEffect","fetch","then","res","json","message","navigate","href","catch","err","NotFound","ReactDOM","render","reducer","initialState","children","Provider","useReducer","state","action","path","default","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cec7facf.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Form,\n  Button,\n  Container,\n  Dropdown,\n  Header,\n  TextArea,\n} from 'semantic-ui-react';\nimport axios from 'axios';\nimport './App.css';\nimport { useStateValue } from './state';\n\nconst BACKEND_APP_URL = 'https://flts-backend.herokuapp.com';\nconst FRONTEND_APP_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : ''\n\nconst App = props => {\n  console.log(process.env.NODE_ENV)\n  const [slug, setSlug] = useState('');\n  const [redirect, setRedirect] = useState('');\n  const [expiration, setExpiration] = useState(5);\n  const [newUrl, setNewUrl] = useState('');\n  const [copySuccess, setCopySuccess] = useState(false);\n  // set up the ref (which will later be re-assigned) from which to copy to clipboard\n  const textAreaRef = useRef(null);\n\n  const [{ error }, dispatch] = useStateValue();\n\n  // dispatch error\n  function setError(newError) {\n    dispatch({\n      type: 'setError',\n      error: newError,\n    });\n  }\n\n  // execute the copy to clipboard\n  function copyToClipboard(e) {\n    textAreaRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    setCopySuccess(true);\n  }\n\n  // send post req to create the new redirect\n  async function createRedirect(newShorten) {\n    try {\n      const { data } = await axios.post(\n        `${BACKEND_APP_URL}/api/shorten/`,\n        newShorten,\n      );\n      const newUrl = `${FRONTEND_APP_URL}/${data.slug}`;\n      console.log('yay', data);\n      console.log('new url: ', newUrl);\n      setNewUrl(newUrl);\n    } catch (err) {\n      if (err.response) {\n        console.log(err.response);\n        setError(err.response.data);\n      } else {\n        console.error(err);\n      }\n    }\n  }\n\n  // handle submit\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!isValidUrl(redirect)) return;\n    setError('');\n    const newRedirect = {\n      slug,\n      redirect,\n      expiration,\n    };\n    console.log(newRedirect);\n    createRedirect(newRedirect);\n  }\n\n  // validate if url entered is valid\n  function isValidUrl(string) {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      setError('URL not valid');\n      return false;\n    }\n  }\n\n  // expiration time settings\n  const options = [\n    { value: 5, text: '5 mins' },\n    { value: 30, text: '30 mins' },\n    { value: 60, text: '1 hour' },\n    { value: 1440, text: '24 hours' },\n  ];\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"jumbotron\">Fix That Link, Shorter</h1>\n      {error && <h1 className=\"h1-error\">{error}</h1>}\n      <div className=\"container\">\n        {!newUrl ? (\n          // don't show the form if we got a new URL just made\n          <div className=\"main-form\">\n            <form onSubmit={handleSubmit}>\n              <label className=\"form-label\" htmlFor=\"url\">URL to shorten</label>\n              <input\n                className={error === 'URL not valid' ? 'form-error' : ''}\n                type=\"text\"\n                name=\"url\"\n                onChange={(e, data) => setRedirect(e.target.value)}\n                label=\"URL to shorten:\"\n                placeholder=\"https://...\"\n              />\n              <label className=\"form-label\" htmlFor=\"slug\">Custom /name</label>\n              <input\n                type=\"text\"\n                name=\"slug\"\n                onChange={(e, data) => setSlug(e.target.value)}\n                label=\"preferred slug\"\n                placeholder=\"Leave blank for random generated text\"\n              />\n              <select\n                onChange={(e, data) => setExpiration(e.target.value)}\n                value={expiration}\n              >\n                {options.map(({value, text}) => (\n                  <option key={Math.random()*100} value={value}>{text}</option>\n                ))}\n              </select>\n              <button type=\"submit\">Shorten!</button>\n            </form>\n          </div>\n        ) : (\n          // we got a URL!\n          <>\n            <Header as=\"h1\" color=\"blue\">\n              NICE!\n            </Header>\n            <form>\n              <textarea ref={textAreaRef} value={newUrl} readOnly />\n              {document.queryCommandSupported('copy') && (\n                <Button onClick={copyToClipboard} disabled={copySuccess}>\n                  {copySuccess ? 'Copied!' : 'Copy to clipboard'}\n                </Button>\n              )}\n            </form>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect } from 'react';\nimport { navigate } from '@reach/router';\nimport { useStateValue } from './state';\n\nconst BACKEND_APP_URL = 'https://flts-backend.herokuapp.com';\n\nconst Redirect = ({ slug }) => {\n  const [{ error }, dispatch] = useStateValue();\n  \n  useEffect(() => {\n    if (slug) {\n      fetch(`${BACKEND_APP_URL}/api/shorten/${slug}`)\n        .then(res => res.json())\n        .then(({ redirect, message }) => {\n          if (message) {\n            // not found\n            console.log(message);\n            \n            \n            dispatch({\n              type: 'setError',\n              error: message\n            })\n            navigate('/')\n          } else {\n            // found a slug, REDIRECT!\n            // window.location.replace(redirect_to);\n            window.location.href = redirect;\n          }\n        })\n        .catch(err => console.error(err));\n    }\n  });\n  \n  return null\n}\n\nexport default Redirect\n","import React from 'react';\n\nconst NotFound = props => {\n  return (\n    <div>\n      <h1>Redirect not found</h1>\n    </div>\n  )\n}\n\nexport default NotFound\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from '@reach/router'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './state';\nimport Redirect from './Redirect';\nimport NotFound from './NotFound';\n\n\nconst initialState = {\n  error: '',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setError':\n      return {\n        ...state,\n        error: action.error\n      }\n    default:\n      return state;\n  }\n}\n\n\nReactDOM.render(\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <Router>\n      <Redirect path='/:slug'/>\n      <NotFound path='notfound' />\n      <App default path='/' />\n    </Router>\n  </StateProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}